{"ast":null,"code":"import deviceEventsJson from \"./events.json\";\nimport fieldsJson from \"./fields.json\"; // ! NOTE: Do not modify this file\n\n/**\n * Mocks an api call returning a list of device events\n * @returns list of device events\n */\n\nexport function getEventDataFromMockedApi() {\n  return new Promise(resolve => setTimeout(() => resolve(deviceEventsJson.map((de, i) => ({ ...de,\n    id: i\n  }))), 1000 - Math.round(Math.random() * 50)));\n}\nexport function getFieldDataFromMockedApi() {\n  return new Promise(resolve => setTimeout(() => resolve(fieldsJson.map((de, i) => ({ ...de,\n    id: i\n  }))), 1000 - Math.round(Math.random() * 50)));\n}","map":{"version":3,"sources":["/Users/bigbrother/Desktop/coda-project/src/api/index.ts"],"names":["deviceEventsJson","fieldsJson","getEventDataFromMockedApi","Promise","resolve","setTimeout","map","de","i","id","Math","round","random","getFieldDataFromMockedApi"],"mappings":"AACA,OAAOA,gBAAP,MAA6B,eAA7B;AACA,OAAOC,UAAP,MAAuB,eAAvB,C,CAEA;;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,yBAAT,GAA6D;AAClE,SAAO,IAAIC,OAAJ,CAA4BC,OAAD,IAChCC,UAAU,CACR,MACED,OAAO,CACLJ,gBAAgB,CAACM,GAAjB,CAAqB,CAACC,EAAD,EAAKC,CAAL,MAAY,EAAE,GAAGD,EAAL;AAASE,IAAAA,EAAE,EAAED;AAAb,GAAZ,CAArB,CADK,CAFD,EAKR,OAAOE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CALC,CADL,CAAP;AASD;AAED,OAAO,SAASC,yBAAT,GAAuD;AAC5D,SAAO,IAAIV,OAAJ,CAAsBC,OAAD,IAC1BC,UAAU,CACR,MAAMD,OAAO,CAACH,UAAU,CAACK,GAAX,CAAe,CAACC,EAAD,EAAKC,CAAL,MAAY,EAAE,GAAGD,EAAL;AAASE,IAAAA,EAAE,EAAED;AAAb,GAAZ,CAAf,CAAD,CADL,EAER,OAAOE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAFC,CADL,CAAP;AAMD","sourcesContent":["import type { DeviceEvent, Field } from \"../types\";\nimport deviceEventsJson from \"./events.json\";\nimport fieldsJson from \"./fields.json\";\n\n// ! NOTE: Do not modify this file\n/**\n * Mocks an api call returning a list of device events\n * @returns list of device events\n */\nexport function getEventDataFromMockedApi(): Promise<DeviceEvent[]> {\n  return new Promise<DeviceEvent[]>((resolve) =>\n    setTimeout(\n      () =>\n        resolve(\n          deviceEventsJson.map((de, i) => ({ ...de, id: i })) as DeviceEvent[]\n        ),\n      1000 - Math.round(Math.random() * 50)\n    )\n  );\n}\n\nexport function getFieldDataFromMockedApi(): Promise<Field[]> {\n  return new Promise<Field[]>((resolve) =>\n    setTimeout(\n      () => resolve(fieldsJson.map((de, i) => ({ ...de, id: i })) as Field[]),\n      1000 - Math.round(Math.random() * 50)\n    )\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
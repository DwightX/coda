{"ast":null,"code":"var _jsxFileName = \"/Users/bigbrother/Desktop/coda-project/src/components/DevicePumps.tsx\",\n    _s = $RefreshSig$();\n\nimport { fetchDeviceEvents, getAllDeviceEvents } from \"../reducers\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction DevicePumps({\n  eventId\n}) {\n  _s();\n\n  var _eventDetails$pressur, _eventDetails$pressur2;\n\n  const dispatch = useDispatch();\n  React.useEffect(\n  /**\n   * Mock api call to get device events\n   */\n  () => {\n    dispatch(fetchDeviceEvents());\n  }, [dispatch]); // TODO: Improve this view\n\n  const events = useSelector(getAllDeviceEvents);\n  const eventDetails = events === null || events === void 0 ? void 0 : events.find(event => {\n    var _event$id;\n\n    return (event === null || event === void 0 ? void 0 : (_event$id = event.id) === null || _event$id === void 0 ? void 0 : _event$id.toString()) === eventId;\n  });\n  let hasPump = eventDetails === null || eventDetails === void 0 ? void 0 : (_eventDetails$pressur = eventDetails.pressure) === null || _eventDetails$pressur === void 0 ? void 0 : _eventDetails$pressur.state_current;\n  let pumpPressure = eventDetails === null || eventDetails === void 0 ? void 0 : (_eventDetails$pressur2 = eventDetails.pressure) === null || _eventDetails$pressur2 === void 0 ? void 0 : _eventDetails$pressur2.reading_kpa;\n  let pumpInformation;\n\n  if (hasPump === \"PHI\") {\n    pumpInformation = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Water Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 26\n      }, this), \"Water Pressure High \", pumpPressure]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 23\n    }, this);\n  } else if (hasPump === \"PLO\") {\n    pumpInformation = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Water Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 26\n      }, this), \"Water Pressure Low (or off) \", pumpPressure]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 23\n    }, this);\n  } else if (hasPump === \"POV\") {\n    pumpInformation = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Water Status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 26\n      }, this), \"Water Pressure is above safe threshold \", pumpPressure]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 23\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: pumpInformation\n  }, void 0, false);\n}\n\n_s(DevicePumps, \"fwBMYe0JcMhIjkCgbEA6qGodrQQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = DevicePumps;\nexport default DevicePumps;\n\nvar _c;\n\n$RefreshReg$(_c, \"DevicePumps\");","map":{"version":3,"sources":["/Users/bigbrother/Desktop/coda-project/src/components/DevicePumps.tsx"],"names":["fetchDeviceEvents","getAllDeviceEvents","useDispatch","useSelector","React","DevicePumps","eventId","dispatch","useEffect","events","eventDetails","find","event","id","toString","hasPump","pressure","state_current","pumpPressure","reading_kpa","pumpInformation"],"mappings":";;;AAAA,SAASA,iBAAT,EAA4BC,kBAA5B,QAAsD,aAAtD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAoE;AAAA;;AAAA;;AAClE,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACAE,EAAAA,KAAK,CAACI,SAAN;AACE;AACJ;AACA;AACI,QAAM;AACJD,IAAAA,QAAQ,CAACP,iBAAiB,EAAlB,CAAR;AACD,GANH,EAOE,CAACO,QAAD,CAPF,EAFkE,CAYlE;;AACA,QAAME,MAAqB,GAAGN,WAAW,CAACF,kBAAD,CAAzC;AACA,QAAMS,YAAqC,GAAGD,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEE,IAAR,CAAcC,KAAD,IAAW;AAAA;;AACpE,WAAO,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,yBAAAA,KAAK,CAAEC,EAAP,wDAAWC,QAAX,QAA0BR,OAAjC;AACD,GAF6C,CAA9C;AAIA,MAAIS,OAAO,GAAGL,YAAH,aAAGA,YAAH,gDAAGA,YAAY,CAAEM,QAAjB,0DAAG,sBAAwBC,aAAtC;AACA,MAAIC,YAAY,GAAGR,YAAH,aAAGA,YAAH,iDAAGA,YAAY,CAAEM,QAAjB,2DAAG,uBAAwBG,WAA3C;AAEA,MAAIC,eAAJ;;AACA,MAAIL,OAAO,KAAK,KAAhB,EAAuB;AACrBK,IAAAA,eAAe,gBAAG;AAAA,8BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAH,0BAA6CF,YAA7C;AAAA;AAAA;AAAA;AAAA;AAAA,YAAlB;AACD,GAFD,MAEO,IAAIH,OAAO,KAAK,KAAhB,EAAuB;AAC5BK,IAAAA,eAAe,gBAAG;AAAA,8BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAH,kCAAqDF,YAArD;AAAA;AAAA;AAAA;AAAA;AAAA,YAAlB;AACD,GAFM,MAEA,IAAIH,OAAO,KAAK,KAAhB,EAAuB;AAC5BK,IAAAA,eAAe,gBAAG;AAAA,8BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAH,6CAAgEF,YAAhE;AAAA;AAAA;AAAA;AAAA;AAAA,YAAlB;AACD;;AACD,sBAAO;AAAA,cAAGE;AAAH,mBAAP;AACD;;GA9BQf,W;UACUH,W,EAYaC,W;;;KAbvBE,W;AAgCT,eAAeA,WAAf","sourcesContent":["import { fetchDeviceEvents, getAllDeviceEvents } from \"../reducers\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DeviceEvent } from \"../types\";\nimport React from \"react\";\n\nfunction DevicePumps({ eventId }: { eventId: string }): JSX.Element {\n  const dispatch = useDispatch();\n  React.useEffect(\n    /**\n     * Mock api call to get device events\n     */\n    () => {\n      dispatch(fetchDeviceEvents());\n    },\n    [dispatch]\n  );\n\n  // TODO: Improve this view\n  const events: DeviceEvent[] = useSelector(getAllDeviceEvents);\n  const eventDetails: DeviceEvent | undefined = events?.find((event) => {\n    return event?.id?.toString() === eventId;\n  });\n\n  let hasPump = eventDetails?.pressure?.state_current;\n  let pumpPressure = eventDetails?.pressure?.reading_kpa;\n\n  let pumpInformation;\n  if (hasPump === \"PHI\") {\n    pumpInformation = <p><h2>Water Status</h2>Water Pressure High {pumpPressure}</p>;\n  } else if (hasPump === \"PLO\") {\n    pumpInformation = <p><h2>Water Status</h2>Water Pressure Low (or off) {pumpPressure}</p>;\n  } else if (hasPump === \"POV\") {\n    pumpInformation = <p><h2>Water Status</h2>Water Pressure is above safe threshold {pumpPressure}</p>;\n  }\n  return <>{pumpInformation}</>;\n}\n\nexport default DevicePumps;\n"]},"metadata":{},"sourceType":"module"}
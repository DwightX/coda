{"ast":null,"code":"var _jsxFileName = \"/Users/bigbrother/Desktop/coda-project/src/components/Device.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport Button from \"@mui/material/Button\";\nimport { getAllDeviceEvents } from \"../reducers\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { generatePath, Link as RouterLink } from \"react-router-dom\";\nimport { fetchDeviceEvents, fetchFields } from \"../reducers\";\nimport Avatar from '@mui/material/Avatar';\nimport Stack from '@mui/material/Stack';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Device() {\n  _s();\n\n  const EVENT_PAGE_PATH = \"/event-:id\";\n  const events = useSelector(getAllDeviceEvents);\n  const dispatch = useDispatch();\n  React.useEffect(\n  /**\n   * Mock api call to get device events\n   */\n  () => {\n    dispatch(fetchDeviceEvents());\n  }, [dispatch]);\n  React.useEffect(\n  /**\n   * Mock API call to get field data\n   */\n  () => {\n    dispatch(fetchFields());\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: events.map(event => {\n      var _event$pressure, _event$reel;\n\n      return /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          minWidth: 275,\n          maxWidth: 300,\n          flexDirection: column\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Device Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"deviceTitle\",\n          children: event.device_alias\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          direction: \"row\",\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {\n            children: (_event$pressure = event.pressure) === null || _event$pressure === void 0 ? void 0 : _event$pressure.state_current\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n            children: (_event$reel = event.reel) === null || _event$reel === void 0 ? void 0 : _event$reel.state_current\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            component: RouterLink,\n            to: generatePath(EVENT_PAGE_PATH, {\n              id: event.id\n            }),\n            size: \"small\",\n            children: \"More Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, event.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false);\n}\n\n_s(Device, \"1JFFZ78LUPIwqhS7ZIKUYkDXKJs=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Device;\nexport default Device;\n\nvar _c;\n\n$RefreshReg$(_c, \"Device\");","map":{"version":3,"sources":["/Users/bigbrother/Desktop/coda-project/src/components/Device.tsx"],"names":["React","Card","CardActions","Button","getAllDeviceEvents","useSelector","useDispatch","generatePath","Link","RouterLink","fetchDeviceEvents","fetchFields","Avatar","Stack","Device","EVENT_PAGE_PATH","events","dispatch","useEffect","map","event","minWidth","maxWidth","flexDirection","column","device_alias","pressure","state_current","reel","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,kBAAT,QAAmC,aAAnC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,YAAT,EAAuBC,IAAI,IAAIC,UAA/B,QAAwD,kBAAxD;AACA,SAAuBC,iBAAvB,EAA0CC,WAA1C,QAA6D,aAA7D;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;;;AAGA,SAASC,MAAT,GAA8B;AAAA;;AAC5B,QAAMC,eAAe,GAAG,YAAxB;AACA,QAAMC,MAAM,GAAGX,WAAW,CAACD,kBAAD,CAA1B;AAEA,QAAMa,QAAQ,GAAGX,WAAW,EAA5B;AACAN,EAAAA,KAAK,CAACkB,SAAN;AACE;AACJ;AACA;AACI,QAAM;AACJD,IAAAA,QAAQ,CAACP,iBAAiB,EAAlB,CAAR;AACD,GANH,EAOE,CAACO,QAAD,CAPF;AASAjB,EAAAA,KAAK,CAACkB,SAAN;AACE;AACJ;AACA;AACI,QAAY;AACVD,IAAAA,QAAQ,CAACN,WAAW,EAAZ,CAAR;AACD,GANH,EAOE,CAACM,QAAD,CAPF;AASA,sBACE;AAAA,cACGD,MAAM,CAACG,GAAP,CAAYC,KAAD;AAAA;;AAAA,0BACV,QAAC,IAAD;AAAqB,QAAA,EAAE,EAAE;AAAEC,UAAAA,QAAQ,EAAE,GAAZ;AAAiBC,UAAAA,QAAQ,EAAE,GAA3B;AAA+BC,UAAAA,aAAa,EAACC;AAA7C,SAAzB;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAI,UAAA,SAAS,EAAC,aAAd;AAAA,oBAA6BJ,KAAK,CAACK;AAAnC;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,KAAD;AAAO,UAAA,SAAS,EAAC,KAAjB;AAAuB,UAAA,OAAO,EAAE,CAAhC;AAAA,kCACJ,QAAC,MAAD;AAAA,yCAASL,KAAK,CAACM,QAAf,oDAAS,gBAAgBC;AAAzB;AAAA;AAAA;AAAA;AAAA,kBADI,eAEJ,QAAC,MAAD;AAAA,qCAASP,KAAK,CAACQ,IAAf,gDAAS,YAAYD;AAArB;AAAA;AAAA;AAAA;AAAA,kBAFI;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAOE,QAAC,WAAD;AAAA,iCACE,QAAC,MAAD;AACE,YAAA,SAAS,EAAElB,UADb;AAEE,YAAA,EAAE,EAAEF,YAAY,CAACQ,eAAD,EAAkB;AAAEc,cAAAA,EAAE,EAAET,KAAK,CAACS;AAAZ,aAAlB,CAFlB;AAGE,YAAA,IAAI,EAAC,OAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA,SAAWT,KAAK,CAACS,EAAjB;AAAA;AAAA;AAAA;AAAA,cADU;AAAA,KAAX;AADH,mBADF;AAuBD;;GA9CQf,M;UAEQT,W,EAEEC,W;;;KAJVQ,M;AAgDT,eAAeA,MAAf","sourcesContent":["import React from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport Button from \"@mui/material/Button\";\nimport { getAllDeviceEvents } from \"../reducers\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { generatePath, Link as RouterLink, Route } from \"react-router-dom\";\nimport { deviceEvents, fetchDeviceEvents, fetchFields } from \"../reducers\";\nimport Avatar from '@mui/material/Avatar';\nimport Stack from '@mui/material/Stack';\n\n\nfunction Device(): JSX.Element{\n  const EVENT_PAGE_PATH = \"/event-:id\";\n  const events = useSelector(getAllDeviceEvents);\n\n  const dispatch = useDispatch();\n  React.useEffect(\n    /**\n     * Mock api call to get device events\n     */\n    () => {\n      dispatch(fetchDeviceEvents());\n    },\n    [dispatch]\n  );\n  React.useEffect(\n    /**\n     * Mock API call to get field data\n     */\n    (): void => {\n      dispatch(fetchFields());\n    },\n    [dispatch]\n  );\n  return (\n    <>\n      {events.map((event) => (\n        <Card key={event.id} sx={{ minWidth: 275, maxWidth: 300,flexDirection:column }}>\n          <span>Device Name:</span>\n          <h1 className=\"deviceTitle\">{event.device_alias}</h1>\n          <Stack direction=\"row\" spacing={2}>\n      <Avatar>{event.pressure?.state_current}</Avatar>\n      <Avatar>{event.reel?.state_current}</Avatar>\n    </Stack>\n          <CardActions>\n            <Button\n              component={RouterLink}\n              to={generatePath(EVENT_PAGE_PATH, { id: event.id })}\n              size=\"small\"\n            >\n              More Details\n            </Button>\n          </CardActions>\n        </Card>\n      ))}\n      </>\n  );\n}\n\nexport default Device;\n"]},"metadata":{},"sourceType":"module"}
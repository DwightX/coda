{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport * as turf from \"@turf/turf\";\nimport { getFieldDataFromMockedApi } from \"../api\";\n\n/**\n * Gets field data from mocked api\n */\nexport const fetchFields = createAsyncThunk(\"fetchFields\", async () => {\n  try {\n    return getFieldDataFromMockedApi();\n  } catch (e) {\n    return Promise.reject(e);\n  }\n});\nconst initialState = {\n  entities: {},\n  ids: []\n};\nconst fields = createSlice({\n  name: \"fields\",\n  initialState,\n  reducers: {\n    clickField(state, action) {\n      state.selectedId = action.payload;\n    },\n\n    closeFieldInfoWindow(state) {\n      state.selectedId = undefined;\n    }\n\n  },\n  extraReducers: builder => builder.addCase(fetchFields.pending, state => {\n    state.fetchStatus = \"pending\";\n  }).addCase(fetchFields.fulfilled, (state, action) => {\n    state.fetchStatus = \"fulfilled\";\n    state.ids = action.payload.map(field => field.id);\n    state.entities = action.payload.reduce((acc, field) => {\n      return { ...acc,\n        [field.id]: { ...field\n        }\n      };\n    }, {});\n  }).addCase(fetchFields.rejected, state => {\n    state.fetchStatus = \"rejected\";\n  })\n});\nexport const {\n  clickField,\n  closeFieldInfoWindow\n} = fields.actions;\n/**\n * Get fields from state as a list\n */\n\nexport const getAllFields = state => {\n  return state.fields.ids.map(id => {\n    const entity = state.fields.entities[id];\n\n    if (typeof entity === \"undefined\") {\n      throw new Error(`No field found with id ${id}`);\n    }\n\n    return entity;\n  });\n};\n/**\n * Get currently selected field id\n */\n\nexport function getClickedFieldId(state) {\n  return state.fields.selectedId;\n}\n/**\n * Get field with given id from state\n *\n * @param state Root State\n * @param fieldId id for field\n * @returns a field if one with given id exists in state, otherwise undefined\n */\n\nexport function getFieldById(state, fieldId) {\n  return state.fields.entities[fieldId];\n}\n/**\n * Calculates field center and converts it to google maps LatLng format\n */\n\nexport function getFieldCenterById(state, id) {\n  const fieldData = getFieldById(state, id);\n\n  if (fieldData) {\n    const [lng, lat] = turf.center(fieldData.polygon).geometry.coordinates;\n    return {\n      lng,\n      lat\n    };\n  }\n\n  return undefined;\n}\nconst fieldsReducer = fields.reducer;\nexport default fieldsReducer;","map":{"version":3,"sources":["/Users/bigbrother/Desktop/coda-project/src/reducers/fields.ts"],"names":["createAsyncThunk","createSlice","turf","getFieldDataFromMockedApi","fetchFields","e","Promise","reject","initialState","entities","ids","fields","name","reducers","clickField","state","action","selectedId","payload","closeFieldInfoWindow","undefined","extraReducers","builder","addCase","pending","fetchStatus","fulfilled","map","field","id","reduce","acc","rejected","actions","getAllFields","entity","Error","getClickedFieldId","getFieldById","fieldId","getFieldCenterById","fieldData","lng","lat","center","polygon","geometry","coordinates","fieldsReducer","reducer"],"mappings":"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","sourcesContent":["import {\n  createAsyncThunk,\n  createSlice,\n  PayloadAction,\n  Reducer,\n} from \"@reduxjs/toolkit\";\nimport * as turf from \"@turf/turf\";\nimport { getFieldDataFromMockedApi } from \"../api\";\nimport { Field } from \"../types\";\nimport type { RootState } from \"./store\";\n\n/**\n * Gets field data from mocked api\n */\nexport const fetchFields = createAsyncThunk<Field[]>(\n  \"fetchFields\",\n  async () => {\n    try {\n      return getFieldDataFromMockedApi();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n);\nexport type FieldsState = {\n  ids: number[];\n  entities: { [id: number]: Field };\n  selectedId?: number;\n  fetchStatus?: \"pending\" | \"fulfilled\" | \"rejected\";\n};\n\nconst initialState: FieldsState = {\n  entities: {},\n  ids: [],\n};\nconst fields = createSlice({\n  name: \"fields\",\n  initialState,\n  reducers: {\n    clickField(state, action: PayloadAction<number>) {\n      state.selectedId = action.payload;\n    },\n    closeFieldInfoWindow(state) {\n      state.selectedId = undefined;\n    },\n  },\n  extraReducers: (builder) =>\n    builder\n      .addCase(fetchFields.pending, (state) => {\n        state.fetchStatus = \"pending\";\n      })\n      .addCase(fetchFields.fulfilled, (state, action) => {\n        state.fetchStatus = \"fulfilled\";\n        state.ids = action.payload.map((field) => field.id);\n        state.entities = action.payload.reduce((acc, field) => {\n          return { ...acc, [field.id]: { ...field } };\n        }, {});\n      })\n      .addCase(fetchFields.rejected, (state) => {\n        state.fetchStatus = \"rejected\";\n      }),\n});\nexport const { clickField, closeFieldInfoWindow } = fields.actions;\n\n/**\n * Get fields from state as a list\n */\nexport const getAllFields = (state: RootState): Field[] => {\n  return state.fields.ids.map((id) => {\n    const entity = state.fields.entities[id];\n    if (typeof entity === \"undefined\") {\n      throw new Error(`No field found with id ${id}`);\n    }\n    return entity;\n  });\n};\n\n/**\n * Get currently selected field id\n */\nexport function getClickedFieldId(state: RootState): number | undefined {\n  return state.fields.selectedId;\n}\n\n/**\n * Get field with given id from state\n *\n * @param state Root State\n * @param fieldId id for field\n * @returns a field if one with given id exists in state, otherwise undefined\n */\nexport function getFieldById(\n  state: RootState,\n  fieldId: number\n): Field | undefined {\n  return state.fields.entities[fieldId];\n}\n\n/**\n * Calculates field center and converts it to google maps LatLng format\n */\nexport function getFieldCenterById(\n  state: RootState,\n  id: number\n): google.maps.LatLngLiteral | undefined {\n  const fieldData = getFieldById(state, id);\n  if (fieldData) {\n    const [lng, lat] = turf.center(fieldData.polygon).geometry.coordinates;\n    return { lng, lat };\n  }\n  return undefined;\n}\nconst fieldsReducer: Reducer<FieldsState> = fields.reducer;\nexport default fieldsReducer;\n"]},"metadata":{},"sourceType":"module"}